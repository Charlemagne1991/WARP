/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-18                                             *
*   Last Modified : 2020-11-21                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Finds the MsgStringTable address and extracts all the strings 
///        till the end into output file. Also allows for translations using a 
///        mapping file (similar to the one used in Translate Client patch) 
///
ExtractMsgStrings = function()
{
	/// 1.1 - Find the string 'msgStringTable.txt'
	let addr = Exe.FindAscii("msgStringTable.txt");
	if (addr < 0)
		throw Error("'msgStringTable.txt' not found");
	
	/// 1.2 - Find where its used in a PUSH
	addr = Exe.FindHex(PUSH(addr) + PUSH());
	if (addr < 0)
		throw Error("'msgStringTable.txt' not used");
	
	/// 1.3 - Find the message string table reference after/before it
	let code, addr2;
	if (Exe.Version < 9.0) //VC6
	{
		code =
			XOR(ESI, ESI)
		+	MOV(R32, POS3WC)
		;
		addr2 = Exe.FindHex(code, addr + 10, addr + 0x20);
	}
	else if (Exe.Version < 14.0) //VC9-VC11
	{
		code = 
			XOR(R32, R32)
		+	XOR(R32, R32)
		+	MOV(R32, R32)
		+	MOV(R32, [R32, POS3WC])
		;
		
		addr2 = Exe.FindHex(code, addr - 0x40, addr);
	}
	else  //VC14.16
	{
		code =
			XOR(R32, R32)
		+	XOR(R32, R32)
		+	OPCH + NOP
		+	MOV(EAX, [POS4WC])
		+	LEA(R32, [R32, 4])
		+	MOV(R32, [R32, POS4WC])
		;
		
		addr2 = Exe.FindHex(code, addr - 0x40, addr);
	}
	if (addr2 < 0)
		throw Error("Message string LUT missing");
	
	/// 1.4 - Extract the table address (PHYSICAL one)
	let disp = Exe.GetUint32(addr2 + code.byteCount() - 4);
	addr = Exe.Vir2Phy(disp - 4);
	
	/// 2.1 - Get the mapping file from user
	let inFile = Exe.GetUserInput('$msgTranslations', D_InFile, "MsgString Translations", "Enter translation mapping file (Optional)", "Inputs/MsgStrMap_EN.yml");
	
	/// 2.2 - Load the translation mapping if valid file provided
	let trMap = (inFile === false ? undefined : _EMS_LoadTr(inFile));
	
	/// 3.1 - Open output file for writing
	let fp = new TextFile("Outputs/msgStringTable_" + ROC.BaseName + ".txt", 'w');
	if (!fp.Valid)
		throw Error("Unable to generate output file");
	
	/// 3.2 - Stop when the int32 at current Location is not matching current index
	let index = 0;
	while (Exe.GetUint32(addr) === index)
	{
		/// 3.3 - Get the address of the string
		let strAddr = Exe.Vir2Phy(Exe.GetUint32(addr + 4));
		
		/// 3.4 - Extract the string
		let msgStr = Exe.GetAscii(strAddr);
		
		/// 3.5 - Translate the string if mapping available
		if (trMap !== undefined && trMap[msgStr] !== undefined)
			msgStr = trMap[msgStr];
		
		/// 3.6 - Write into output file
		fp.WriteLine(msgStr + '#');
		
		/// 3.7 - Set addr to next entry
		addr += 8;
		
		/// 3.8 - Increment index
		index++;
	}
	
	/// 4.1 - Close the file
	fp.Close();

	/// 4.2 - Show the success message
	return "MsgStrings have been extracted to the Outputs folder";
};

///
/// \brief Helper function for loading translation YAML into 1 to 1 mapping
///
_EMS_LoadTr = function(inFile)
{
	let arr = Warp.LoadYaml(inFile);
	if (!Array.isArray(arr))
		return undefined;
	
	let trMap = {};
	arr.forEach( hash =>
	{
		let findPat = hash.find;
		let replStr = hash.replace;
		if (findPat === undefined || replStr === undefined)
			return;
			
		findPat = (findPat + '').replace(/\n/g, "\\n").replace(/\r/g, "\\r");
		replStr = (replStr + '').replace(/\n/g, "\\n").replace(/\r/g, "\\r");
		
		let parts = findPat.match(/^\s*'(.*)'\s*$/);
		if (parts === null)
			findPat = findPat.toAscii();
		else
			findPat = parts[1];
		
		parts = replStr.match(/^\s*'(.*)'\s*$/);
		if (parts === null)
			replStr = replStr.toAscii();
		else
			replStr = parts[1];

		trMap[findPat] = replStr;
	});
	
	return trMap;
	
};
