/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author       : Neo-Mind                                                *
*   Created Date : 2020-11-06                                              *
*   Last Modified: 2020-11-07                                              *
*                                                                          *
\**************************************************************************/

if (typeof(PACKET) === 'undefined') // avoid redefinition
{
	///
	/// \brief Values denoting how the KeySetter function is called
	///
	KeyMode = {
		Push: 0,    //Keys pushed as argument
		Move: 1,    //Direct assignment inside Function
		Shared: 2,  //Extension of the above but with a shared key 
		Virtual: 3, //Virtualized function (need to use an explicit mapping instead)
		Unknown: 4  //Self Explanatory
	};
	
	///
	/// \brief Hash describing the Packet Encryption details
	///
	PACKET = 
	{
		/// Initialize the data members
		KeySetter : -1,      //The VIRTUAL address of the function which sets the keys and/or does the obfuscation
        KS_Mode   : KeyMode.Unknown, //The mode of the function above 
		
        MovECX    : "",      //The code for MOV ECX, DWORD PTR DS:[KeyAddr]
        Keys      : [0,0,0], //The set of Packet Keys that were extracted/mapped out
		
        Assigner  : -1,      //Location where the keys are assigned inside ObfuscateOrInit function
        PatchData : [],      //Data saved by packet key patches
		
		Valid: false,        //Will be true if the address was extracted succesfully
		Error: '',           //Error Object containing a message about the issue
		                     //encountered during extraction if any
		
		///
		/// \brief Extracts the new data from a loaded exe.
		///
		init: function()
		{
			/// 1.1 - Initialize Valid to false & reset the PatchData	
			this.Valid = false;
			this.PatchData = [];
			
			/// 1.2 - Ensure the Build date is within valid values
			if (Exe.BuildDate < 20110817 || Exe.BuildDate > 20180306)
			{
				this.Error = new Error("PKT - Unsupported build date");
				return;
			}
			
			/// 1.3 - Find the string 'PACKET_CZ_ENTER'
			let addr = Exe.FindAscii("PACKET_CZ_ENTER");
			if (addr > 0)
			{
				/// 1.4 - Find where its used in a 'PUSH'
				addr = Exe.FindHex( PUSH(addr) );
			}
			
			if (addr < 0)
			{
				/// 1.5 - If not found then look for the CALL, MOV, CALL pattern
				let inb4 =
					CALL(ALLWC)   //CALL func1
				+	MOV(ECX, EAX) //MOV ECX, EAX
				+	CALL(ALLWC)   //CALL func2
				;
				
				let code = 
					inb4
				+	PUSH_EAX      //PUSH EAX
				+	inb4
				+	PUSH_1        //PUSH 1
				+	inb4
				+	PUSH(6)       //PUSH 6
				;
				
				addr = Exe.FindHex(code);
			}			
			if (addr < 0)
			{
				this.Error = new Error("PKT - reference location not found");
				return;
			}
			
			/// 2.1 - Look for 3 PUSHes followed by a CALL (keys are PUSHed to function)
			let code =
				MOV(ECX, [POS3WC]) //MOV ECX, DWORD PTR DS:[KeyAddr]
			+	PUSH(ALLWC)        //PUSH key3
			+	PUSH(ALLWC)        //PUSH key2
			+	PUSH(ALLWC)        //PUSH key1
			+	CALL()             //CALL KeySetter
			;
			let callAddr = Exe.FindHex(code, addr - 0x100, addr);
			if (callAddr > 0)
			{
				/// 2.2 - If found then set the KS_Mode and extract the MOV statement
				this.KS_Mode = KeyMode.Push;
				this.MovECX = Exe.GetHex(callAddr, 6);
				
				/// 2.3 - Extract the KeySetter address and the keys themselves
				callAddr += code.byteCount() - 4;
				this.KeySetter = Exe.GetTgtAddr(callAddr);
				this.Keys[0] = Exe.GetInt32(callAddr -  5);
				this.Keys[1] = Exe.GetInt32(callAddr - 10);
				this.Keys[2] = Exe.GetInt32(callAddr - 15);
				
				/// 2.4 - Set Empty message & validity to true.
				this.Error = '';
				this.Valid = true;
				return;
			}
			
			/// 3.1 - Look for PUSH 1, CALL pattern next (keys get assigned inside the function)
			code =
				MOV(ECX, [POS3WC]) //MOV ECX, DWORD PTR DS:[KeyAddr]
			+   PUSH_1             //PUSH 1
			+   CALL()             //CALL CRagConnection::ObfuscateOrInit
			;
			callAddr = Exe.FindHex(code, addr - 0x100, addr);
			if (callAddr < 0)
			{
				this.Error = new Error("PKT - ObfuscateOrInit CALL not found");
				return;
			}
			
			/// 3.2 - Extract the MOV statement
			this.MovECX = Exe.GetHex(callAddr, 6);
			
			/// 3.3 - Extract the CALLed function address which is the KeySetter
			callAddr += code.byteCount();
			this.KeySetter = Exe.GetTgtAddr(callAddr);
			
			/// 3.4 - Go inside the function
			let fnAddr = Exe.Vir2Phy(this.KeySetter);
			
			/// 3.5 - Prep the common prefix for searching
			let prefix = 
				CMP(EAX, 1) //CMP EAX, 1
			+	JNE(WC)     //JNE SHORT addr
			;
			
			/// 4.1 - First look for the individual key assignment pattern
			code =
				prefix
			+   MOV([ECX, WCp], ALLWC)   //MOV DWORD PTR DS:[ECX+x], <Key A> ;the keys could be assigned in any order
			+   MOV([ECX, WCp], ALLWC)   //MOV DWORD PTR DS:[ECX+y], <Key B>
			+   MOV([ECX, WCp], ALLWC)   //MOV DWORD PTR DS:[ECX+z], <Key C>
			;
			
			addr = Exe.FindHex(code, fnAddr, fnAddr + 0x50);
			if (addr > 0)
			{
				/// 4.2 - If found then set the mode to 'Move' and save the location of the first MOV as the Assigner
				this.Assigner = addr + prefix.byteCount();
				this.KS_Mode = KeyMode.Move;
				
				/// 4.3 - Extract the keys being assigned
				addr = this.Assigner;
				for (let i = 0; i < 3; i++)
				{
					let ins = Instr.FromAddr(addr);
					this.Keys[ins.Disp/4 - 1] = ins.Immd; //order can be any so this mechanism is needed
					addr = ins.NextAddr;
				}
				
				/// 4.4 - Set Empty message & validity to true.
				this.Error = '';
				this.Valid = true;
				return;
			}
			
			/// 5.1 - Next look for the shared key pattern
			code =
				prefix
			+   MOV(EAX, ALLWC)        //MOV EAX, <Key A> ; shared key
			+   MOV([ECX, WCp], EAX)   //MOV DWORD PTR DS:[ECX+x], EAX
			+   MOV([ECX, WCp], EAX)   //MOV DWORD PTR DS:[ECX+y], EAX
			+   MOV([ECX, WCp], ALLWC) //MOV DWORD PTR DS:[ECX+z], <Key B>
			;
			
			addr = Exe.FindHex(code, fnAddr, fnAddr + 0x50);
			if (addr > 0)
			{
				/// 5.2 - If found then set the mode to 'Shared' and save the location of the first MOV as the Assigner
				this.Assigner = addr + prefix.byteCount();
				this.KS_Mode = KeyMode.Shared;
				
				/// 5.3 - Extract the shared key first
				let ins = Instr.fromAddr(this.Assigner);
				let sharedKey = ins.Immd;

				/// 5.4 - Extract all the keys (little more tricky since there is a MOV EAX)
				for (let i = 0; i < 3; i++)
				{
					ins = Instr.fromAddr(ins.NextAddr);
					this.Keys[ins.Disp/4 - 1] = (i < 2) ? sharedKey : ins.Immd;
				}
				
				/// 5.5 - Set Empty message & validity to true.
				this.Error = '';
				this.Valid = true;
				return;
			}
			
			/// 6.1 - Since neither pattern matched we need to use explicit mapping
			this.KS_Mode = KeyMode.Virtual;
			
			/// 6.2 - Retrieve the mapping from the file
			if (typeof(PktKeyMap) === 'undefined' || PktKeyMap === false)
			{
				PktKeyMap = Warp.LoadYaml("Inputs/PacketKeyMap.yml");
			}
			
			/// 6.3 - Retrieve the keys based on the date
			let arr = PktKeyMap[Exe.BuildDate];
			
			this.Valid = Array.isArray(arr);
			if (this.Valid)
			{
				this.Keys = arr;
				this.Error = '';
			}
			else
			{
				this.KS_Mode = KeyMode.Unknown;
				this.Error = new Error("PKT - No patterns or mappings matched");
			}
		},
	};
	
	IdentifyObj("PACKET");
}