/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-06                                             *
*   Last Modified : 2020-11-16                                             *
*                                                                          *
\**************************************************************************/

if (typeof(WINMGR) === 'undefined') // avoid redefinition
{
	///
	/// \brief Hash describing the Window Manager details
	///
	WINMGR = 
	{
		///
		/// \brief Initialize the data members
		///
		init : function()
		{
			this.Value   = -1;        //The VIRTUAL address of g_windowMgr
			this.Hex     = '';        //It's hex in Little Endian form
			this.MovECX  = '';        //The code for MOV ECX, g_windowMgr (more useful most of the time)
			this.MakeWin = -1;        //The VIRTUAL address of UIWindowMgr::MakeWindow
									  
			this.Valid   = undefined; //True or False indicating extraction status
			this.Error   = undefined; //Error Object containing a message about the issue
								      //encountered during extraction if any
		},
		
		///
		/// \brief Extracts the new data from a loaded exe.
		///
		load : function()
		{
			/// 1.1 - Check if load was already called
			if (this.Valid !== undefined)
				return this.Valid;
			
			/// 1.2 - Initialize 'Valid' to false
			this.Valid = false;
			
			/// 1.3 - Find the string 'NUMACCOUNT'
			let addr = Exe.FindAscii("NUMACCOUNT");
			if (addr < 0)
			{
				this.Error = new Error("WM - 'NUMACCOUNT' not found");
				return false;
			}
			
			/// 1.4 - Find where its used in a 'PUSH'
			let code =
				MOV(ECX, POS3WC)	//MOV ECX, g_windowMgr
			+	CALL(NEG3WC)    	//CALL UIWindowMgr::MakeWindow
			+	PUSH_0				//PUSH 0
			+	PUSH_0				//PUSH 0
			+	PUSH(addr)			//PUSH addr; ASCII "NUMACCOUNT"
			;
			
			addr = Exe.FindHex(code);
			if (addr < 0)
			{
				code = code.replace(PUSH_0, PUSH_0 + MOV(R32, R32));
				addr = Exe.FindHex(code);
			}
			if (addr < 0)
			{
				this.Error = new Error("WM - 'NUMACCOUNT' not used");
				return false;
			}
			
			/// 2.1 - Extract the g_windowMgr address, compute MOV instruction & CALL function address
			this.Value = Exe.GetUint32(addr + 1);
			this.Hex = this.Value.toHex(4);
			this.MovECX = " B9" + this.Hex;
			this.MakeWin = Exe.GetTgtAddr(addr + 6);
			
			/// 2.2 - Set validity to true
			this.Valid = true;
			return true;
		},
		
		///
		/// \brief toString override to output the hex value
		///
		toString : function()
		{
			return this.Hex;
		},
	};
	
	IdentifyObj("WINMGR");
}

///
/// \brief Initialize when Exe is loaded (only load the object in relevant patches)
///
WINMGR.init();