/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2020-11-29                                             *
*                                                                          *
\**************************************************************************/

// TODO - New clients (maybe 2018+) use mem ptrs to compare instead of direct values like 0x63 and 0x96 . 
//        Need to investigate for both patches.

///
/// \brief Modify the code inside UIBasicInfoWnd::NewHeight to change the limits as per user specified input file.
///        The code being modified is responsibles for displaying the Base & Job experience bars
///
CustomBarLimits = function()
{
    /// 1.1 - Find the coordinate PUSHes for Base exp bar
    let code =
        PUSH(0x4E)   //PUSH 4E
    +   PUSH(-0xC8)  //PUSH -0C8
    ;

    let refAddr = Exe.FindHex(code);
    if (refAddr < 0)
        throw Error("Base coord PUSHes missing");

    /// 1.2 - Find the Job ID fetcher CALL before the first reference
    code =
        MOV(ECX, POS4WC)  //MOV ECX, OFFSET g_session
    +   CALL(POS3WC)      //CALL CSession::GetJobID
    +   PUSH_EAX          //PUSH EAX
    +   MOV(ECX, POS4WC)  //MOV ECX, OFFSET g_session
    +   CALL(POS3WC)      //CALL CSession::IsThirdJob
    ;
    
    let addr = Exe.FindHex(code, refAddr - 0x120, refAddr);
    if (addr < 0)
        throw Error("JobID CALL not found");

    /// 1.3 - Extract g_session, GetJobID and save the addr to baseBegin variable
    let Session  = Exe.GetInt32(addr + 1);
    let GetJobID = Exe.GetTgtAddr(addr + 6);// 5 from the MOV and 1 from opcode of CALL
    let baseBegin = addr;

    /// 1.4 - Save location after the 2nd CALL 
    let afterBB = baseBegin + code.byteCount();
    
    /// 2.1 - Find the base level assignment/comparison after the CALLs
    if (Exe.Version < 9.0)
    {
        code =
            MOV(EAX, [POS3WC])  //MOV EAX, DWORD PTR DS:[g_baseLevel]
        +   MOV(EDI, 0x63)      //MOV EDI, 63
        ;
    }
    else if (Exe.BuildDate < 20130000)
    {
        code = CMP([POS3WC], EDI); //CMP DWORD PTR DS:[g_baseLevel], EDI
    }
    else if (Exe.BuildDate < 20170000)
    {
        code = CMP([POS3WC], 0xAF); //CMP DWORD PTR DS:[g_baseLevel], 0AF
    }
	else
	{
		code = CMP(R32, [POS4WC]); //CMP reg32_A, DWORD PTR DS:[g_baseLevel]
	}

    addr = Exe.FindHex(code, afterBB, afterBB + 0x100);
    if (addr < 0)
        throw Error("Base level address missing");
    
    /// 2.2 - Extract the address 
    let BaseLevel = Instr.FromAddr(addr).Disp; //this is easier and will remain accurate even if some changes happen in later versions
    
    /// 2.3 - Find the ESI + const assignment between afterBB & refAddr
    addr = Exe.FindHex( MOV(ECX, [ESI, POS1WC]), afterBB, refAddr);//MOV ECX, DWORD PTR DS:[ESI+const]
	
    if (addr < 0)
		addr = Exe.FindHex( MOV(EDX, [ESI, POS1WC]), afterBB, refAddr);//MOV EDX, DWORD PTR DS:[ESI+const]
	
    if (addr < 0)
        throw Error("First ESI ptr missing");
    
    /// 2.4 - Extract the const (which is HideBase) 
    let HideBase = Instr.FromAddr(addr).Disp;
    
    /// 2.5 - Calculate remaining constants
    let HideJob  = HideBase + 0x04;
	let ShowBars, FuncOff;
    if (Exe.Version < 9.0)
    {
        ShowBars = HideBase + 0x10;
        FuncOff = 0x18; //value added to [ECX] to retrieve the function address
    }
    else
    {
        ShowBars = HideBase + 0x08;
        FuncOff = 0x10;
    }
    
    /// 3.1 - Find the end of the base exp display code after the ESI movement
    code =
        PUSH(0x55)            //PUSH 55
    +   CALL([R32, FuncOff])  //CALL DWORD PTR DS:[reg32 + FuncOff]
    +   MOV(ECX, Session)     //MOV ECX, OFFSET g_session
    ;
    let addr2 = Exe.FindHex( code, addr, refAddr + 0x60);

	if (addr2 < 0)
	{
        code = code.replace(CALL([R32, FuncOff]), CALL(R32)); //Change CALL DWORD PTR to CALL reg32
		addr2 = Exe.FindHex( code, addr, refAddr + 0x60);
    }
    if (addr2 < 0)
        throw Error("End of Base missing");
    
    /// 3.2 - Save the location of MOV ECX
    let baseEnd = addr2 + code.byteCount() - 5;
    let jobBegin = baseEnd; //MOV ECX also marks the beginning of Job Exp Display code so yea they are same

    /// 3.3 - Find the job level comparison with 10
	let delta;
	if (Exe.BuildDate > 20170000)
	{
		delta = 0;
		code =
			CMP([POS4WC], R32)	 //CMP DWORD PTR DS:[g_jobLevel], reg32_A
		;
		addr = Exe.FindHex(code, jobBegin + 0x100, jobBegin + 0x180);
		if (addr < 0 && Exe.BuildDate > 20190400)
			addr = Exe.FindHex(code, jobBegin, jobBegin + 0x50);
    }
	else
	{
		delta = 2;
		code =
			JMP(WCp)              //JMP SHORT addr
		+   CMP([POS3WC], 0xA)    //CMP DWORD PTR DS:[g_jobLevel], 0A 
		;
		addr = Exe.FindHex(code, jobBegin, jobBegin + 0x120);
	
		if (addr < 0)
		{
			code = 
				JE(WCp)				//JE SHORT addr
			+   CMP([POS3WC], 0x32)	//CMP DWORD PTR DS:[g_jobLevel], 32 
			;
			addr = Exe.FindHex(code, jobBegin, jobBegin + 0x120);
		}
	}
    if (addr < 0)
        throw Error("Job level comparison missing");
    
    /// 3.4 - Extract the Address
    let JobLevel = Instr.FromAddr(addr + delta).Disp;
    
    /// 3.5 - Find the coordinate PUSHes for Job exp bar (job End is just after it)
    code =
        PUSH(0x58)           //PUSH 58
    +   PUSH(-0xC8)          //PUSH -0C8
    +   CALL([R32, FuncOff]) //CALL DWORD PTR DS:[reg32 + FuncOff]
    ;
    if (Exe.Version >= 9.0 && Exe.Version <= 10.0)
        code = code.replace(CALL([R32, FuncOff]), CALL(R32)); //Change CALL DWORD PTR to CALL reg32
    
    addr2 = Exe.FindHex(code, addr + 7, addr + 0x60);
    if (addr2 < 0 && Exe.BuildDate > 20190000)
	{
		code = 
			PUSH(0x55)	//PUSH 55
		+	CALL(R32)	//CALL reg32
		;
		addr2 = Exe.FindHex(code, addr + 7, addr + 0x60);
	}
    if (addr2 < 0)
        throw Error("Job coord PUSHes missing");
    
    /// 3.6 - Save location after the CALL as jobEnd
    let jobEnd = addr2 + code.byteCount();
    
    /// 4.1 - Get the input file from user
	let inFile = Exe.GetUserInput('$expBarSpec', D_InFile, "Exp Bar Spec", "Enter the Exp Bar Mapping file", "Inputs/ExpSpec.yml", {filters: YMLFILTER});
    if (inFile === false)
        throw "Cancelled - No mapping file specified";

    /// 4.2 - Load the input file which creates the hash table mapping the id ranges to max base & job levels
	let ExpSpec = Warp.LoadYaml(inFile);
	if (!Array.isArray(ExpSpec))
		throw "Cancelled - Invalid/non-existent mapping file";
	
	/// 4.3 - Calculate size of mapping table
    let identSize = 0;
	ExpSpec.forEach( hash =>
	{
		identSize += hash.IDs.length * 4;
		identSize += 2;
	});

    /// 5.1 - Prepare code for base & job exp bars (will be replaced at baseBegin)
    code =
        PUSH(EDX)                    //PUSH EDX
    +   PUSH(EBX)                    //PUSH EBX
    +   MOV(ECX, Session)            //MOV ECX, g_session
    +   CALL(MakeFiller(1))          //CALL CSession::GetJobID
    +   MOV(EBX, MakeFiller(2))      //MOV EBX, mapTblAddr
    +   MOV(ECX, [EBX])              //MOV ECX, DWORD PTR DS:[EBX];	loop_mapTbl
    +   TEST(ECX, ECX)               //TEST ECX, ECX
    +   JE(0x26)                     //JE SHORT _noMatches
    +   MOVSX(EDX, [ECX])            //MOVSX EDX, WORD PTR DS:[ECX]; loop_idTbl
    +   TEST(EDX, EDX)               //TEST EDX, EDX
    +   JS(0x15)                     //JS SHORT _fetchNextIDTbl
    +   CMP(EAX, EDX)                //CMP EAX, EDX
    +   JL(0xC)                      //JL SHORT _fetchNextIDPair
    +   MOVSX(EDX, [ECX, 2])         //MOVSX EDX, WORD PTR DS:[ECX+2]
    +   TEST(EDX, EDX)               //TEST EDX, EDX
    +   JS(0x9)                      //JS SHORT _fetchNextIDTbl
    +   CMP(EAX, EDX)                //CMP EAX, EDX
    +   JLE(0xA)                     //JLE SHORT _foundIDMatch
    +   ADD(ECX, 4)                  //ADD ECX, 4;	_fetchNextIDPair
    +   JMP(-0x28)                   //JMP SHORT loop_idTbl
    +   ADD(EBX, 8)                  //ADD EBX, 8;	_fetchNextIDTbl
    +   JMP(-0x39)                   //JMP SHORT loop_mapTbl
    +   LEA(EDI, [EBX, 4])           //LEA EDI, [EBX + 4] ; _foundIDMatch
    +   JMP(0x5)                     //JMP SHORT addr7
    +   MOV(EDI, MakeFiller(3))      //MOV EDI, OFFSET defAddr ; _noMatches
    +   POP(EBX)                     //POP EBX; addr7
    +   POP(EDX)                     //POP EDX
    +   MOVZX(EAX, [EDI])            //MOVZX EAX, WORD PTR DS:[EDI]
    +   CMP([BaseLevel], EAX)        //CMP DWORD PTR DS:[g_baseLevel], EAX
    +   MOV(ECX, [ESI, HideBase])    //MOV ECX, DWORD PTR DS:[ESI + HideBase]
    +   JL(0x9)                      //JL SHORT _lowBase
    +   PUSH(0x4E)                   //PUSH 4E
    +   PUSH(-0xC8)                  //PUSH -0C8
    +   JMP(0xC)                     //JMP SHORT _common1
    +   MOV(EAX, [ESI, ShowBars])    //MOV EAX, DWORD PTR DS:[ESI + ShowBars]; _lowBase
    +   ADD(EAX, 0x4C)               //ADD EAX, 4C
    +   PUSH_EAX                     //PUSH EAX
    +   PUSH(0x55)                   //PUSH 55
    +   MOV(EAX, [ECX])              //MOV EAX, DWORD PTR DS:[ECX]; _common1
    +   CALL([EAX, FuncOff])         //CALL DWORD PTR DS:[EAX + funcOff]
    +   MOVZX(EAX, [EDI, 2])         //MOVZX EAX, WORD PTR DS:[EDI+2]
    +   CMP([JobLevel], EAX)         //CMP DWORD PTR DS:[g_jobLevel], EAX
    +   MOV(ECX, [ESI, HideJob])     //MOV ECX, DWORD PTR DS:[ESI + HideJob]
    +   JL(0x9)                      //JL SHORT _lowJob
    +   PUSH(0x58)                   //PUSH 58
    +   PUSH(-0xC8)                  //PUSH -0C8
    +   JMP(0xC)                     //JMP SHORT _common2
    +   MOV(EAX, [ESI, ShowBars])    //MOV EAX, DWORD PTR DS:[ESI + ShowBars]; _lowJob
    +   ADD(EAX, 0x58)               //ADD EAX, 58
    +   PUSH_EAX                     //PUSH EAX
    +   PUSH(0x55)                   //PUSH 55
    +   MOV(EAX, [ECX])              //MOV EAX, DWORD PTR DS:[ECX]; _common2
    +   CALL([EAX, FuncOff])         //CALL DWORD PTR DS:[EAX + funcOff]
    +   JMP(MakeFiller(4))           //JMP jobEnd
    +   "FF 00 FF 00"                //part of the id to level mapping ; defAddr
    ;
    
    /// 5.2 - Calculate mapTblAddr value (we will be placing it right after the JMP jobEnd since we have space for it)
    let mapTblAddr = baseBegin + code.byteCount();
    let defAddr = mapTblAddr - 4;

    /// 5.3 - Fill in the blanks
    code = SwapFiller(code, 1, GetJobID - Exe.Phy2Vir(baseBegin + 12));
    code = SwapFiller(code, 2, Exe.Phy2Vir(mapTblAddr));
    code = SwapFiller(code, 3, Exe.Phy2Vir(defAddr));//defAddr = mapTblAddr - 4
    code = SwapFiller(code, 4, jobEnd - defAddr);
    
    /// 5.4 - Allocate space to add the id values
    let free = Exe.FindSpace(identSize);
    if (free < 0)
        throw NO_ALLOC;
    
    let freeVir = Exe.Phy2Vir(free, DIFF);
    
    /// 5.5 - Concatenate all the ID values and prepare the mapping
    let mapData   = ""; //will contain address pointing to set of IDs and base (16bit) & job (16bit) max levels after the address
    let identData = ""; //will contain the set of IDs

	addr = 0;
	ExpSpec.forEach( hash =>
    {
        mapData += (freeVir + addr).toHex();
		hash.IDs.forEach( elem =>
		{
			if (Array.isArray(elem))
				identData += elem[0].toHex(2) + elem[1].toHex(2);
			else
				identData += elem.toHex(2).repeat(2);
			
			addr += 2;
		});
		identData += " FF FF";
		addr += 2;
		
		mapData += hash.BaseLvl.toHex(2) + hash.JobLvl.toHex(2);
    });
	
	mapData += ALL00;

    /// 5.6 - Add the IDs at the allocated space
    Exe.AddHex(free, identData, identSize);
    
    /// 5.7 - Put the function & the map at baseBegin
    Exe.SetHex(baseBegin, code + mapData);

    return true;
};

//TODO - Make color and coords configurable for the following

///
/// \brief Inject code inside UIBasicInfoWnd::OnDraw function to make it also display the exp values 
///        The exp values are displayed along with other info inside the "Basic Info" window when not minimized.
///
ShowExpNumbers = function()
{
    /// 1.1 - Find the string 'Alt+V, Ctrl+V'
    let addr = Exe.FindText("Alt+V, Ctrl+V", VIRTUAL, false);
    if (addr < 0)
        throw Error("Reference string not found");

    /// 1.2 - Find where it is PUSHed inside UIBasicInfoWnd::OnCreate function
	let code =
		PUSH(addr)     //PUSH addr; ASCII "Alt+V, Ctrl+V"
	+   MOV(ECX, R32)  //MOV ECX, reg32_A
	+   CALL(ALLWC)    //CALL func
	;
    addr = Exe.FindHex(code);
    if (addr < 0)
        throw Error("Reference string not used");

    /// 1.3 - Set addr to location after the code
    addr += code.byteCount();

    /// 2.1 - Find the double PUSH pattern after the above PUSH (addresses of Total and Current Exp values are being sent as args to be filled)
    code =
        MOV(ECX, [R32, POS1WC])     //MOV ECX, DWORD PTR DS:[reg32_B + const]
    +   PUSH(POS3WC)                //PUSH totExp
    +   PUSH(POS3WC)                //PUSH curExp
    +   CALL()                      //CALL loaderFunc
    ;
	let totOffset = 7; //6 from MOV and 1 for PUSH opcode
	
    let pushAddr = Exe.FindHex(code, addr, addr + 0x300);
	if (pushAddr < 0)
	{
		code =
			MOV(ECX, [R32, POS1WC]) //MOV ECX, DWORD PTR DS:[reg32_B + const]
		+   PUSH([POS4WC])          //PUSH DWORD PTR DS:[totExp]
		+   PUSH([POS4WC])          //PUSH DWORD PTR DS:[curExp.sign bit]
		+   PUSH([POS4WC])          //PUSH DWORD PTR DS:[curExp]
		+   CALL()                  //CALL loaderFunc
		;
		
		totOffset = 8; //6 from MOV and 2 for PUSH DWORD PTR opcode
		pushAddr = Exe.FindHex(code, addr, addr + 0x300);
	}
    if (pushAddr < 0)
        throw Error("Base Exp addrs not PUSHed");

	/// 2.2 - Extract the Total Exp address
    let TotExpBase = Exe.GetInt32(pushAddr + totOffset);
	
    /// 2.3 - Set pushAddr to location after the CALL
    pushAddr += code.byteCount() + 4;
	
    /// 2.4 - Extract the Current Exp address
    let CurExpBase = Exe.GetInt32(pushAddr - 9);
    
    /// 2.5 - Find the double PUSH pattern again after the first one (this time it is for Job Exp values)
    pushAddr = Exe.FindHex(code, pushAddr, addr + 0x300);
    if (pushAddr < 0)
        throw Error("Job Exp addrs not PUSHed");

    /// 2.6 - Extract the Total Exp & Current Exp addresses
    let TotExpJob = Exe.GetInt32(pushAddr + totOffset);
    let CurExpJob = Exe.GetInt32(pushAddr + code.byteCount() - 5);
    
    /// 3.1 - Find the string 'SP'
    let addrs = Exe.FindTextN("SP");
	if (addrs.find(matchAddr =>
	{
		/// 3.2 - Find where it is PUSHed inside OnDraw function (we need to inject after this location)
		code =
			PUSH(matchAddr) //PUSH addr; ASCII "SP"
		+   PUSH(0x41)      //PUSH 41
		+   PUSH(0x11)      //PUSH 11
		;
		addr = Exe.FindHex(code);
		return (addr > 0);
	}) === undefined
	)
        throw Error("PUSH 'SP' missing");

    /// 3.3 - Set addr to location after PUSH 11
    addr += code.byteCount();

    /// 3.4 - Setup ECX movement based on the next instruction 
    ///       If the UIWindow::TextOutA function CALL comes immediately after the pattern, ECX should be loaded from ESI
    ///       otherwise the next instruction is a MOV to ECX after which the CALL is expected
	let MovEcx;
    if (Exe.GetUint8(addr === 0xE8))
    {
        MovEcx = MOV(ECX, ESI);
    }
    else
    {
        MovEcx = Exe.GetHex(addr, 2);
        addr += 2;
        
        if (Exe.GetUint8(addr) !== 0xE8)
            throw Error("TextOutA CALL not found");
    }
    
    /// 3.5 - Extract UIWindow::TextOutA and the location where the CALL is made (we will be hijacking the CALL)
    let UIW_TextOutA = Exe.GetTgtAddr(addr + 1);
    let injectAddr = addr;

    /// 3.6 - Account for extra argument PUSH (PUSH 0) for more recent clients
    let extraPush = (Exe.BuildDate > 20140116) ? PUSH_0 : '';

    /// 4.1 - Get the essential addresses for our code
    
    // sprintf/wsprintfA
    let printFunc = Exe.FindFunc("sprintf");

    if (printFunc < 0)
        printFunc = Exe.FindFunc("wsprintfA");

    if (printFunc < 0)
        throw Error("No print functions found");

    // '%d / %d'
    let ddAddr = Exe.FindText("%d / %d", VIRTUAL, false);
    if (ddAddr < 0)
        throw Error("Format string for exp not found");
    
    /// 4.2 - Prepare the template code for displaying the exp numbers (common for both Base & Job Exp) 
    let template =
        MOV(EAX, MakeFiller(1))     //MOV EAX, DWORD PTR DS:[totExp*]
    +   MOV(ECX, MakeFiller(2))     //MOV ECX, DWORD PTR DS:[curExp*]
    +   OR(ECX, EAX)                //OR ECX, EAX
    +   JE(MakeFiller(3, 1))        //JE SHORT addr ; location after TextOutA CALL
    +   PUSH_EAX                    //PUSH EAX
    +   MOV(EAX, MakeFiller(2))     //MOV EAX, DWORD PTR DS:[curExp*]
    +   PUSH_EAX                    //PUSH EAX
    +   PUSH(ddAddr)                //PUSH addr; ASCII "%d / %d"
    +   LEA(EAX, [ESP, 0xC])        //LEA EAX, [ESP + 0C]
    +   PUSH_EAX                    //PUSH EAX
    +   CALL([printFunc])           //CALL DWORD PTR DS:[<&MSVCR#.sprintf>] ; wsprintfA if sprintf is not found
    +   ADD(ESP, 0x10)              //ADD ESP, 10
    +   MOV(EAX, ESP)               //MOV EAX, ESP
    +   extraPush                   //PUSH 0     ; Arg8 = unknown. Only for new clients
    +   PUSH_0                      //PUSH 0     ; Arg7 = Color
    +   PUSH(0xD)                   //PUSH 0D    ; Arg6 = Font Height
    +   PUSH_1                      //PUSH 1     ; Arg5 = Font Index
    +   PUSH_0                      //PUSH 0     ; Arg4 = Char count (0 => calculate string size)
    +   PUSH_EAX                    //PUSH EAX   ; Arg3 = String i.e. output from sprintf above
    +   PUSH(MakeFiller(4, 1))      //PUSH y     ; Arg2 = y Coord
    +   PUSH(0x56)                  //PUSH x     ; Arg1 = x Coord
    +   MovEcx                      //MOV ECX, reg32_A
    +   CALL(MakeFiller(5))         //CALL UIWindow::TextOutA ; stdcall => No Stack restore required
    ;
    template = SwapFiller(template, 3, template.byteCount() - 15, 1, 1); //putting the distance in JE SHORT (this is needed since byteCount can vary)
     
    /// 4.3 - Prepare the full code from the template
    code = 
        CALL(MakeFiller(10))                                        //CALL UIWindow::TextOutA
    +   PUSH_EAX                                                    //PUSH EAX
    +   SUB(ESP, 0x20)                                              //SUB ESP, 20
    +   SwapFillers(template, [1, 2], [TotExpBase, CurExpBase], 2)  //for Base Exp
    +   SwapFillers(template, [1, 2], [TotExpJob,  CurExpJob],  2)  //for Job Exp
    +   ADD(ESP, 0x20)                                              //ADD ESP, 20
    +   POP(EAX)                                                    //POP EAX
    +   JMP(MakeFiller(11))                                         //JMP retAddr = injectAddr + 5
    ;
    let csize = code.byteCount();
    
    /// 4.4 - Allocate space to add our code
    let free = Exe.FindSpace(csize);
    if (free < 0)
        throw NO_ALLOC;

    let freeVir = Exe.Phy2Vir(free, DIFF);

    /// 4.5 - Fill in the remaining blanks
    code = SwapFiller(code, 10, UIW_TextOutA - (freeVir + 5));
    
    code = SwapFiller(code, 4, 0x4E, 1, 1); //y coord for Base
    code = SwapFiller(code, 5, UIW_TextOutA - (freeVir + 9 + template.byteCount()) );    //5 for CALL, 1 for PUSH EAX and 3 for SUB ESP

    code = SwapFiller(code, 4, 0x68, 1, 1); //y coord for Job
    code = SwapFiller(code, 5, UIW_TextOutA - (freeVir + 9 + template.byteCount() * 2) );//5 for CALL, 1 for PUSH EAX and 3 for SUB ESP

    code = SwapFiller(code, 11, Exe.Phy2Vir(injectAddr + 5, CODE) - (freeVir + csize));

    /// 4.6 - Add the code at the allocated space
    Exe.AddHex(free, code, csize);

    /// 4.7 - Hijack the CALL at injectAddr (change it to a JMP to our code)
    Exe.SetJMP(injectAddr, freeVir);
    
    return true;
};

///
/// \brief Pattern is too different for pre-2010 clients hence disabling
///
CustomExpBars_ = () => Exe.BuildDate >= 20100000;

///
/// \brief Wrappers for individual patch validation
///
CustomBarLimits.validate = CustomExpBars_;
ShowExpNumbers.validate  = CustomExpBars_;