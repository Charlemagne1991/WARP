/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author       : Neo-Mind                                                *
*   Created Date : 2020-11-12                                              *
*   Last Modified: 2020-11-12                                              *
*                                                                          *
\**************************************************************************/

///
/// \brief Swap out the check for Esc key inside UIWindowMgr::ProcessPushButton 
///        for UIIllustWnd to enable closing the cutin window.
///
CloseCutinOnEsc = function()
{
	/// 1.1 - Find the test for case 6 inside UIIllustWnd::SendMsg
	let code =
		JE(POS2WC)		//JE addr ; this is for CMP EAX, 6
	+ 	CMP(EAX, 0x22) 	//CMP EAX, 22
	+ 	JE(POS2WC) 		//JE addr2
	+ 	CMP(EAX, 0x4E)	//CMP EAX, 4E
	;
	
	let addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Case 6 test missing");
	
	/// 1.2 - Set addr to first JE location
	addr = Exe.GetTgtAddr(addr + 2, PHYSICAL);
	
	/// 1.3 - Look for the GetGameMode CALL inside UIIllustWnd::SendMsg
	let prefix = 
		MOV(ECX, POS3WC)			//MOV ECX, OFFSET g_modeMgr
	+	CALL(ALLWC)					//CALL CModeMgr::GetGameMode
	;
	code = "";
	
	if (Exe.Version < 14.0)
		code += MOV(EDX, [EAX]);	//MOV EDX, DWORD PTR DS:[EAX] ; for VC6 - VC11
	
	code +=	PUSH_0;					//PUSH 0
	
	if (Exe.BuildDate > 20110217)
		code += PUSH(' 0?');		//PUSH 0 or 1
	
	code +=	PUSH(-1);				//PUSH -1
	
	if (Exe.Version > 14.0)
	{
		code += 
			MOV(EDX, [EAX])			//MOV EDX, DWORD PTR DS:[EAX]
		+	MOV(ECX, EAX)			//MOV ECX, EAX
		;
	}
	
	code += PUSH(POS3WC);			//PUSH OFFSET EmptyStr ; zeros at the location
	
	if (Exe.Version > 6.0 && Exe.BuildDate < 20150000)
	{
		code +=
			MOV(ECX, EAX)			//MOV ECX, EAX
		+	MOV(EAX, [EDX, ' 1?'])	//MOV EAX, DWORD PTR DS:[EDX + const] ; const is either 14 or 18
		;
	}
	
	code += PUSH(' [011.0.0.]');	//PUSH 64 or 71
	
	if (Exe.Version < 9.0 || Exe.BuildDate > 20150000)
	{
		if (Exe.Version < 14.0)
			code += MOV(ECX, EAX);	//MOV ECX, EAX
		
		code += CALL([EDX, ' 1?']);	//CALL DWORD PTR DS:[EDX + const] ; const is either 14 or 18
	}
	else
	{
		code += CALL(EAX);			//CALL EAX
	}
	
	let addr2 = Exe.FindHex(prefix + code, addr, addr + 0x50);
	if (addr2 < 0)
		throw Error("GetGameMode CALL missing");
	
	/// 1.4 - Extract the necessary data
	let gModeMgr = Exe.GetUint32(addr2 + 1);
	let GetGameMode = Exe.GetTgtAddr(addr2 + 6);
	
	let suffix = Exe.GetHex(addr2 + prefix.byteCount(), code.byteCount());
	
	
	/// 2.1 - Search for the Esc Key check and DeleteWindow function CALL inside UIWindowMgr::ProcessPushButton
	let part1 =
		PUSH(R32)					//PUSH reg32_A
	+	MOV(ECX, R32)				//MOV ECX, reg32_B
	+	CALL(ALLWC)					//CALL UIWindowMgr::check_close <-- patch here
	;
	
	if (Exe.Version > 6.0)
	{
		part1 +=
			TEST(AL, AL)			//TEST AL, AL
		+	JNZ(POS2WC)				//JNZ addr2
		;
	}
	
	part1 += CMP(R32, -1);			//CMP reg32_A, -1
	
	if (Exe.BuildDate > 20101116 && 
		Exe.BuildDate < 20141020)
		part1 += JE(POS1WC);		//JE addr1 or
	else
		part1 += JZ(WCp);			//JZ SHORT addr1
	
	part1 +=
		PUSH(R32)					//PUSH reg32_A
	+	MOV(ECX, R32)				//MOV ECX, reg32_B
	+	CALL(ALLWC)					//CALL UIWindowMgr::DeleteWindow
	;
	
	let part2 = Exe.BuildDate <= 20120222 ?
		TEST(AL, AL)			 	//TEST AL, AL  or
	:
		CMP(AL, 1)					//CMP AL, 1
	;

	addr = Exe.FindHex(part1 + part2);
	if (addr < 0)
		throw Error("Esc key check not found");
	
	/// 2.2 - Extract the necessary data
	let fromLoc = addr + 3;	
	let retnVir = Exe.Phy2Vir(addr + 8);
	
	let CheckClose = Exe.GetTgtAddr(fromLoc + 1);
	let DeleteWindow = Exe.GetTgtAddr(addr + part1.byteCount() - 4);
	
	/// 3.1 - Prepare code to be injected
	code =
		PUSH(78)				//PUSH 78 ; window id
	+	CALL(MakeFiller(1))		//CALL UIWindowMgr::DeleteWindow
	;
	let csizeDW = code.byteCount();
	
	code +=
		CMP(AL, 0)				//CMP AL, 0
	+	JNZ(0xC)				//JNZ SHORT addr1
	+	MOV(ECX, EDI)			//MOV ECX, EDI
	+	PUSH(retnVir)			//PUSH retnVir
	+	JMP(MakeFiller(2))		//JMP UIWindowMgr::check_close ; equivalent to CALL intended for return to retnVir
	;
	let csizeCC = code.byteCount();
	
	code +=
	 	PUSH(EDX)				//PUSH EDX
	+	MOV(ECX, gModeMgr)		//MOV ECX, OFFSET g_modeMgr
	+	CALL(MakeFiller(3))		//CALL CModeMgr::GetGameMode
	;
	let csizeGGM = code.byteCount();
	
	code +=
		MOV(EDX, [EAX])			//MOV EDX, DWORD PTR DS:[EAX]
	+	suffix					//combinations of 
								//PUSH 0
								//PUSH 0 or 1 (for newer clients)
								//PUSH -1
								//PUSH OFFSET EmptyStr
								//PUSH 64 or 71
								//MOV ECX, EAX
								//CALL DWORD PTR DS:[EDX + const] or MOV reg32_A, DWORD PTR DS:[EDX + const] ; const is either 14 or 18
								//CALL reg32_A
	+	POP(EDX)				//POP EDX
	+	POP(ECX)				//POP ECX
	+	POP(EAX)				//POP EAX
	+	PUSH(retnVir)			//PUSH retnVir
	+	RETN					//RETN
	;
	
	/// 3.2 - Allocate space for the code
	let free = Exe.FindSpace(code.byteCount(), 0x10);
	if (free < 0)
		throw NOSPACE;
	
	/// 3.3 - Fill in the blanks
	let freeVir = Exe.Phy2Vir(free, DIFF);
	code = SwapFiller(code, 1, DeleteWindow - (freeVir + csizeDW));
	code = SwapFiller(code, 2, CheckClose - (freeVir + csizeCC));
	code = SwapFiller(code, 3, GetGameMode - (freeVir + csizeGGM));
	
	/// 3.4 - Inject the code
	Exe.AddHex(free, code);
	
	/// 3.5 - Change the check_close CALL into JMP to the code above
	Exe.SetUint8(fromLoc, 0xE9);
	Exe.SetTgtAddr(fromLoc + 1, freeVir);
	
	return true;
};