/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2020-11-16                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Fixup all the LangType comparison Jumps in Mailbox function
///
EnableMailAccess = function()
{
    /// 1.1 - Ensure the LANGTYPE is loaded
    if (!LANGTYPE.load())
        throw LANGTYPE.Error;
    
    /// 1.2 - Prepare codes for finding short jumps
	let tc = " [.0....01] [11...000]"; //Common match for TEST EAX, EAX & CMP EAX, r32
	
    let code =
		tc							//TEST or CMP
    +   JE(WCp)    					//JE SHORT addr1
    +   CMP(EAX, 8)					//CMP EAX, 08
    +   JE(WCp)    					//JE SHORT addr1
    +   CMP(EAX, 9)					//CMP EAX, 09
    +   JE(WCp)    					//JE SHORT addr1
    ;
    let nopCount = code.byteCount();
    let suffix1 = MOV(ECX, [ESI, POS1WC]); //MOV ECX, DWORD PTR DS:[ESI+const]
    let suffix2 = MOV(EBX, 1);             //MOV EBX, 1

    /// 1.3 - Find all locations of 1st Langtype comparison (in the mailbox function)
    let addrs = Exe.FindHexN(code + suffix1);
    if (addrs.length !== 3)
        throw Error("First comparison not found");

    /// 1.4 - NOP out the entire 'code' (since nopCount is large internally we will get a JMP automatically)
	addrs.forEach( addr => Exe.SetNOPs(addr, nopCount) );

    /// 2.1 - Find the 2nd Langtype comparison
    let addr = Exe.FindHex(code + suffix2);
    if (addr < 0)
        throw Error("Second comparison not found");

    /// 2.2 - NOP out the entire 'code'
    Exe.SetNOPs(addr, nopCount);

    /// 2.3 - Prepare codes for finding Long jumps
    let prefix = MOV(EAX, [LANGTYPE]);    //MOV EAX, DWORD PTR DS:[g_serviceType]
    
    code =
        tc             		//TEST or CMP
    +   JE(POS2WC)          //JE addr1
    +   CMP(EAX, 8)         //CMP EAX, 08
    +   JE(POS2WC)          //JE addr1
    +   CMP(EAX, 9)         //CMP EAX, 09
    +   JE(POS2WC)          //JE addr1
    ;
    nopCount = code.byteCount();
    
    /// 2.4 - Find all locations with this pattern - 3 or 4 would be there
    addrs = Exe.FindHexN(prefix + code);
    if (addrs.length < 3 || addrs.length > 4)
        throw Error("Incorrect no of matches found");

    /// 2.5 - NOP out the 'code'
	addrs.forEach( addr => Exe.SetNOPs(addr + 5, nopCount) );
    
    if (addrs.length === 3)
    {
        /// 3.1 - If only 3 locations were found then one got missed 
        ///       so we will use different pattern to look for it
        addr = Exe.FindHex(code + PUSH(0x23));//PUSH 23
        if (addr < 0)
            throw Error("Fourth comparison not found");
        
        /// 3.2 - NOP out the 'code'
        Exe.SetNOPs(addr, nopCount);
    }
	
    return true;
};

///
/// \brief Disable Patch for Clients that dont have this issue (Pre-2013) or don't use regular mailbox anymore (Post-Aug 2014)
///
EnableMailAccess.validate = () => Exe.BuildDate >= 20130320 && Exe.BuildDate <= 20140800;