/**************************************************************************\
*                                                                          *
*   Copyright (C) 2014-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-01-17                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Modify the Siege mode & BG mode check Jumps to Display Emblem when either is ON
///
ShowBGEmblem = function()
{
	/// 1.1 - Find the Mode checker pattern (there can be multiple matches)
	let parts = [
		MOV(ECX, POS4WC)  //MOV ECX, OFFSET g_session
	+	CALL(POS3WC)      //CALL CSession::IsSiegeMode
	+	TEST(EAX, EAX)    //TEST EAX, EAX
	,
		JZ(WCp)           //JZ SHORT addr
	+	MOV(ECX, POS4WC)  //MOV ECX, OFFSET g_session 
	,
		CALL(POS3WC)      //CALL CSession::IsBgMode <- we will jump from here
	+	TEST(EAX, EAX)    //TEST EAX, EAX
	+	JNZ(WCp)          //JNZ SHORT addr
	];

	let code = parts.join('');

	let addrs = Exe.FindHexN(code);
	if (addrs.isEmpty())
		throw Error("Mode checker not found");

	let csize = code.byteCount();

	/// 1.2 - Find the correct match using the expected pattern afterwards.
	let plus110 = Exe.Version < 11.0  //(reg32_A is usually ESI)
	?	ADD(R32, 0x110)               //ADD reg32_A, 110 ; for VC9-VC10
	:	LEA(EAX, [R32, 0x110])        //LEA EAX, [reg32_A + 110] ; for VC11 to VC14.16
	;

	let matchAddr = addrs.find(memAddr =>
	{
		let addr = Exe.FindHex(PUSH_1 + plus110, memAddr + csize, memAddr + csize + 0x20);
		if (addr < 0)
			addr = Exe.FindHex(plus110 + PUSH_1, memAddr + csize, memAddr + csize + 0x20);

		return (addr > 0);
	});

	if (matchAddr === undefined)
		throw Error("All false matches found");

	/// 2.1 - Save the JNZ's location, it's VIRTUAL counterpart & its target location.
	let jnzAddr = matchAddr + csize - 2;
	let showAddr = Exe.Phy2Vir(jnzAddr, CODE);
	let hideAddr = Exe.GetTgtAddr(jnzAddr + 1, 1);

	/// 2.2 - Change the JNZ to XOR EAX, EAX - to avoid coordinate issue later
	///       (not really needed for recent clients though)
	///
	Exe.SetHex(jnzAddr, XOR(EAX, EAX));

	/// 2.3 - Goto address of JZ
	let jzAddr = matchAddr + parts[0].byteCount();

	/// 2.4 - Change it to JNZ SHORT with target as 'jnzAddr'
	Exe.SetHex(jzAddr, JNZ(jnzAddr, jzAddr)); //both are in same section so we can use PHYSICAL addresses for calculation

	/// 2.5 - Save the location of the IsBgMode CALL
	let jmpAddr = jzAddr + parts[1].byteCount();

	/// 2.6 - Extract the CALL's target
	let IsBgMode = Exe.GetTgtAddr(jmpAddr + 1);

	/// 3.1 - Prep our code
	code =
		CALL(Filler(1)) //CALL CSession::IsBgMode
	+	JNZ(Filler(2))  //JNZ showAddr
	+	JMP(Filler(3))  //JMP hideAddr
	;

	/// 3.2 - Allocate space to add it
	let free = Exe.FindSpace(16, 0x10); //5 + 6 + 5 bytes needed
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 3.3 - Fill in the blanks
	code = SetFillTargets(code, {
		1: IsBgMode,
		2: showAddr,
		3: hideAddr,
	}, freeVir, 1);

	/// 3.4 - Add at allocated space
	Exe.AddHex(free, code);

	/// 3.5 - Create JMP to our code at jmpAddr
	Exe.SetJMP(jmpAddr, freeVir);

	return true;
};

///
/// \brief Disable for Old clients since they didnt have the BG mode check
///
ShowBGEmblem.validate = () => Exe.BuildDate >= 20130700;
