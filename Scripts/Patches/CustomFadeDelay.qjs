/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : 4144                                                   *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2020-11-12                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change value used in comparison of fade out delay for same map warps
///
CustomFadeDelay = function()
{
    /// 1.1 - Search for fadeout for cycle in CMode::RunFadeOut
    let prefix =
        MOV(ESI, [POS4WC])	//  0 MOV ESI, DWORD PTR DS:[timeGetTime]
	;
	let suffix =
        CALL(ESI)			//  6 CALL ESI ; timeGetTime
    +   MOV(ECX, [POS4WC])	//  8 MOV ECX, DWORD PTR DS:[g_renderer]
    +   MOV([POS4WC], EAX)	// 14 MOV DWORD PTR DS:[dwFadeStart], EAX
    +   CALL(ALLWC)			// 19 CALL CRenderer_BackupFrame
    +   CALL(ESI)			// 24 CALL ESI ; timeGetTime
    +   SUB(EAX, [POS4WC])	// 26 SUB EAX, DWORD PTR DS:[dwFadeStart]
    +   CMP(EAX, 0xFF)	    // 32 CMP EAX, FF
    +   JNB(POS2WC)			// 37 JNB addr
	;
    let dwFadeStartOffset1 = 15;
    let dwFadeStartOffset2 = 28;
    let fadeOutDelayOffset1 = 33;
    let g_rendererOffset = 10;
	
    let patAddr1 = Exe.FindHex(prefix + suffix);
    if (patAddr1 < 0)
    {
        prefix += ADD(ESP, WCp); // ADD ESP, const; usually 18
		
        dwFadeStartOffset1 += 3;
        dwFadeStartOffset2 += 3;
        fadeOutDelayOffset1 += 3;
        g_rendererOffset += 3;
		
        patAddr1 = Exe.FindHex(prefix + suffix);
    }
    if (patAddr1 < 0)
        throw Error("pattern not found");
	
	/// 1.2 - Extract the FadeStart address
    let FadeStart = Exe.GetUint32(patAddr1 + dwFadeStartOffset1);
	
	/// 1.3 - Ensure its not a false match
    if (FadeStart !== Exe.GetUint32(patAddr1 + dwFadeStartOffset2))
		throw Error("Pattern found but a false match");
	
	/// 1.4 - Extract the g_renderer address
    let g_renderer = Exe.GetUint32(patAddr1 + g_rendererOffset);

    /// 1.5 - Search below in same function for second delay usage
    let code =
        MOV(ECX, [g_renderer])	//  0 MOV ECX, DWORD PTR DS:[g_renderer]
	+	CALL(ALLWC)				//  6 CALL CRenderer_RestoreFrame
	+	CALL(ESI)				// 11 CALL ESI ; timeGetTime
	+	SUB(EAX, [FadeStart])	// 13 SUB EAX, DWORD PTR DS:[dwFadeStart]
	+	CMP(EAX, 0xFF)			// 19 CMP EAX, FF
	+	JB(NEG2WC)				// 24 JB addr
	;
    let fadeOutDelayOffset2 = 20;

    let patAddr2 = Exe.FindHex(code, patAddr1, patAddr1 + 0xc0);
    if (patAddr2 < 0)
        throw Error("2nd pattern not found");

    // 1.6 - Search for the separate fadeout code in CMode_ProcessFadeIn
    code =
        CALL([POS4WC])			//  0 CALL DWORD PTR DS:[timeGetTime]
	+	SUB(EAX, [FadeStart])	//  6 SUB EAX, DWORD PTR DS:[dwFadeStart]
    +	POP(ESI)				// 12 POP ESI
	+	CMP(EAX, 0xFF)			// 13 CMP EAX, FF
	+	JNB(WC)					// 18 JNB SHORT locret_71FDBC
	+	MOV(ECX, 0xFF)			// 20 MOV ECX, FF
	+	SUB(ECX, EAX)			// 25 SUB ECX, EAX
	+	MOV(EAX, [g_renderer])	// 27 MOV EAX, DWORD PTR DS:[g_renderer]
    +	SHL(ECX, 0x18)			// 32 SHL ECX, 18
	+	PUSH(ECX)				// 35 PUSH ECX
	;
    let fadeOutDelayOffset3 = 14;

    let patAddr3 = Exe.FindHex(code);
    if (patAddr3 < 0)
    {
		code =
			CALL(EDI)				//  0 CALL EDI
		+	SUB(EAX, [FadeStart])	//  2 SUB EAX, DWORD PTR DS:[dwFadeStart]
		+	POP(EDI)				//  8 POP EDI
		+	POP(ESI)				//  9 POP ESI
		+	CMP(EAX, 0xFF)			// 10 CMP EAX, FF
		+	JNB(WC)					// 15 JNB SHORT loc_587FF4
		+	MOV(EDX, 0xFF)			// 17 MOV EDX, FF
		+	SUB(EDX, EAX)			// 22 SUB EDX, EAX
		+	MOV(EAX, [g_renderer])	// 24 MOV EAX, DWORD PTR DS:[g_renderer]
		+	MOV(ECX, [EAX, WCp])	// 29 MOV ECX, DWORD PTR DS:[EAX + const];
		+	SHL(EDX, 0x18)			// 32 SHL EDX, 18
		+	PUSH(EDX)				// 35 PUSH EDX
		;
        fadeOutDelayOffset3 = 11;
		
        patAddr3 = Exe.FindHex(code);
    }
    if (patAddr3 < 0)
        throw Error("3rd pattern missing");

    /// 2.1 - Get the new value from user
    let delay = Exe.GetUserInput('$warpFadeOutDelay', D_Uint32, "Delay value", "Enter new fadeout delay in ms", 255, {max: 512});
    if (delay === false)
		throw "Cancelled - Delay reverted to 255";
	
	/// 2.2 - Replace all the instances where the delay was used for comparison
	Exe.SetFromVar(patAddr1 + fadeOutDelayOffset1, '$warpFadeOutDelay'); // first delay in fade out function
	Exe.SetFromVar(patAddr2 + fadeOutDelayOffset2, '$warpFadeOutDelay'); // second delay in fade out function
	Exe.SetFromVar(patAddr3 + fadeOutDelayOffset3, '$warpFadeOutDelay'); // last one in separate fade out code
	
    return true;
};