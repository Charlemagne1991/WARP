/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Neo-Mind                                    *
*   Created Date  : 2020-11-10                                             *
*   Last Modified : 2020-11-10                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Make the code inside CLoginMode::OnChangepktON which sends 0x2B0,
///        use the original password (available as argument 1) instead of encrypted one
///
NoLoginEncr = function()
{
    /// 1.1 - Find Encryptor function CALL
    let code =
		PUSH_R         //PUSH reg32_A
    +   CALL(NEG3WC)   //CALL Encryptor
    +   MOV(ECX, 6)    //MOV ECX, 6
    +   LEA() 		   //LEA reg32_B, [LOCAL.x]
    ;
    let addr = Exe.FindHex(code);
    if (addr < 0)
        throw Error("Encryptor CALL not found");

    /// 1.2 - Extract the register PUSHed before the CALL (i.e. Arg.1). It has the unencrypted password
    let regNum = Exe.GetUint8(addr) - 0x50;

    /// 1.3 - Set addr to location of LEA
    addr += code.byteCount() - 1;
    
    /// 2 - Change source argument in LEA from EBP-x to register specified by regNum
    let ins = Instr.FromAddr(addr);
    let regB = R32List[ins.MRM.RgOp];
    let regA = R32List[regNum];
    
    code = 
        LEA(regB, [regA])         //LEA reg32_B, [reg32_A]
    +   NOP.repeat(ins.Size - 2)  //NOP fill rest of the space
    ;

    Exe.SetHex(addr, code);
    return true;
};

// TODO - Some 2011 clients dont have the packet encryption function //

///
/// \brief Find call to the encryption function and substitute it with XOR EAX, EAX
///
NoPacketEncr = function()
{
	/// 1.1 - Check if one of the Packet Key patches are ON (unless in test mode)
	if (!Exe.TestMode && PktKeyPatches.find( name => Exe.IsSelected(name) ) !== undefined)
		throw "Cancelled - One of the Encryption Key patches are ON";
	
	/// 1.2 - Ensure the PACKET object has been loaded with valid data
	PACKET.load();
	if (!PACKET.Valid)
		throw PACKET.Error;

    /// 2.1 - Find the Packet Encryption CALL (may or may not be PACKET.KeySetter)
    let code = PACKET.MovECX;    //MOV ECX, DWORD PTR DS:[KeyAddr]
    if (PACKET.KS_Mode !== KeyMode.Push)
        code += PUSH_0;          //PUSH 0

    code += CALL(ALLWC);         //CALL CRagConnection::Encryptor

    let addr = Exe.FindHex(code);
    if (addr < 0)
        throw Error("Encryption CALL not found");

    /// 2.2 - Change the MOV to XOR EAX, EAX 
    Exe.SetHex(addr, XOR(EAX, EAX));
	
	/// 2.3 - NOP the remaining
    Exe.SetNOPs(addr + 2, code.byteCount() - 2);
    
    return true;
}

///
/// \brief Disable for unsupported clients 
///
NoLoginEncr.validate  = () => Exe.BuildDate > 20080600 && Exe.BuildDate < 20100803;
NoPacketEncr.validate = () => Exe.BuildDate >= 20110817 && Exe.BuildDate <= 20180306;