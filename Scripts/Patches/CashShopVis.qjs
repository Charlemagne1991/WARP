/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author       : Neo-Mind                                                *
*   Created Date : 2020-11-08                                              *
*   Last Modified: 2020-11-10                                              *
*                                                                          *
\**************************************************************************/

// TODO - Need to fix for latest RE clients  (they dont detect properly) //

///
/// \brief NOP out the Cash Shop Icon UIWindow creation code (ID = 0xBE)
///
HideCashShop = function()
{
    /// 1 - Check if WinMgr was loaded
    if (!WINMGR.Valid)
        throw WINMGR.Error;
0
    /// 2 - Find the UIWindow creation for Cash Shop (0xBE)
    let code =
        PUSH(0xBE)      //PUSH 0BE
    +   WINMGR.MovECX   //MOV ECX, OFFSET g_windowMgr
    +   CALL()          //CALL UIWindowMgr::MakeWindow
    ;
    let addr = Exe.FindHex(code);
    if (addr < 0)
        throw "Cancelled - Cash Shop Icon is already hidden";

    /// 3 - If found then NOP it out
    Exe.SetNOPs(addr, code.byteCount() + 4);
	
	return true;
};

///
/// \brief Add the Cash Shop Icon UIWindow creation code (ID = 0xBE) and hook it to where it was supposed to be present
///
ShowCashShop = function()
{
    /// 1.1 - Check if WinMgr was loaded
    if (!WINMGR.Valid)
        throw WINMGR.Error;

    /// 1.2 - Find the location where the cash shop icon was supposed to be created
    code =
        JNE(0xF)        //JNE SHORT addr; skips to location after the call for creating another icon
    +   PUSH(0x9F)      //PUSH 09F
    +   WINMGR.MovECX   //MOV ECX, OFFSET g_windowMgr
    +   CALL()          //CALL UIWindowMgr::MakeWindow
    ;

    let jmpAddr = Exe.FindHex(code);
    if (jmpAddr < 0)
        throw Error("Icon creation location not found");

    /// 1.3 - Save location after the CALL
    let retnAddr = jmpAddr + code.byteCount() + 4;

    /// 2.1 - Check if the cash shop Icon creation is already there before it
    if (Exe.FindHex( PUSH(0xBE) + WINMGR.MovECX, jmpAddr - 0x30, jmpAddr) > 0)
        return "Cancelled - Icon is already shown";

    /// 2.2 - Prepare our code to create the icon
    let pos1 = code.byteCount() + 4;
	
    code += 
		MakeFiller(1)          //Remaining parts are already used for search above
    +   PUSH(0xBE)             //PUSH 0BE ; addr2
    +   WINMGR.MovECX          //MOV ECX, OFFSET g_windowMgr
    +   CALL(MakeFiller(2))    //CALL UIWindowMgr::MakeWindow
    +   JMP(MakeFiller(3))     //JMP retnAddr; jump back to retnAddr
    ;
    let pos2 = code.byteCount();
    
    /// 2.3 - Allocate space to add our code
    let free = Exe.FindSpace(code.byteCount(), 0x10);
    if (free < 0)
        throw NOSPACE;

    let freeVir = Exe.Phy2Vir(free, DIFF);

    /// 2.4 - Fill in the Blanks
    code = SwapFiller(code, 1, WINMGR.MakeWin - (freeVir + pos1));
    code = SwapFiller(code, 2, WINMGR.MakeWin - (freeVir + pos2 - 5));
    code = SwapFiller(code, 3, Exe.Phy2Vir(retnAddr, CODE) - (freeVir + pos2));

    /// 2.5 - Add the code at the allocated space
    Exe.AddHex(free, code);
    
    /// 2.6 - Create a jump to it at jmpAddr
	Exe.SetHex(jmpAddr, JMP(freeVir, Exe.Phy2Vir(jmpAddr, CODE)));
    
    return true;
}

///
/// \brief Wrappers for individual patch validation
///
HideCashShop.validate = HasCashShop;
ShowCashShop.validate = HasCashShop;