/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Authors      : Ai4rei/AN, Neo                                          *
*   Created Date : 2020-11-10                                              *
*   Last Modified: 2020-11-10                                              *
*                                                                          *
\**************************************************************************/

///
/// \brief Translate Korean strings to user specified strings both loaded from user specified file.
///        Also fixes Taekwon branch Job names
///
TranslateClient = function()
{
	[
		["\xC5\xC2\xB1\xC7\xBC\xD2\xB3\xE0", "TaeKwon Girl"],
		["\xC5\xC2\xB1\xC7\xBC\xD2\xB3\xE2", "TaeKwon Boy"]
	].forEach( arr =>
	{
		/// 1.1 - Find the korean string.
		let nameAddr = Exe.FindAscii(arr[0]);
		if (nameAddr < 0)
			throw Error("Korean name missing for " + arr[1]);
		
		/// 1.2 - Find where it is assigned for being used as job name
		let assgn = Exe.Version < 11.0 ? [R32, 0x3F38] 
		:
			(ROCL.IsRenewal && Exe.BuildDate < 20190800) || (!ROCL.IsRenewal && Exe.BuildDate < 20190810) ? R32
		:
			[EBP, WCn]
		;
		
		let addr = Exe.FindHex( MOV(assgn, nameAddr) );
		if (addr < 0 && Exe.BuildDate > 20190800)
		{
			addr = Exe.FindHex( MOV([EAX, 0x3F38], nameAddr) );
		}
		if (addr < 0)
			throw Error("Korean name reference missing for " + arr[1]);
		
		/// 1.3 - Find the replacement english string
		let tgtAddr = Exe.FindAscii(arr[1]);
		if (tgtAddr < 0)
			throw Error("'" + arr[1] + "' not found");
		
		/// 1.4 - Extract the instruction of the original to get its size
		let ins = Instr.FromAddr(addr);
		
		/// 1.5 - Replace the immediate value (i.e. the last 4 bytes)
		Exe.SetInt32(addr + ins.Size - 4, tgtAddr);
	});
	
	/// 2.1 - Get the translation map file from user
	let inFile = Exe.GetUserInput('$translationFile', D_InFile, "Translation Mapping", "Enter the translation file", "Inputs/Translations_EN.yml", {filters: "YAML files (*.yml;*.yaml)"});
    if (inFile === false)
        throw "Cancelled - No translation file specified";
	
	/// 2.2 - Load the mapping
	let Translations = Warp.LoadYaml(inFile);
	if (!Array.isArray(Translations))
		throw "Cancelled - Invalid/Non-existent translation file";
	
	/// 2.3 - Open the Failed Translations output file - for writing out unexpected translation fails
	let fp = new TextFile(Warp.Path + "Outputs/FailedTranslations_" + ROCL.BaseName + ".txt", 'w');
	if (!fp.Valid)
		throw Error("Unable to create FailedTranslations Output file");
	
	/// 3.1 - Retrieve the Section end point addresses
	let dbegin  = Exe.GetSectBegin(DATA);
	let d2begin = Exe.GetSectBegin(DATA2);
	let dend  = Exe.GetSectEnd(DATA);
	let d2end = Exe.GetSectEnd(DATA2);
	
	/// 3.2 - Initialize the failed translation count
	let failCount = 0;
	
	Translations.forEach( (hash, idx) =>
	{
		/// 3.3 - Retrieve the 3 parts 
		let fromStr = hash.find;
		let toStr = hash.replace;
		let desc = hash.desc;
		
		/// 3.4 - Ensure description is a valid string/number, defaults to the replacement string
		if (desc === undefined)
			desc = toStr;
		
		if (!IsNumOrStr(desc))
			desc = "Translation #" + idx;
		
		/// 3.5 - Ensure we have valid patterns for search & replace
		if (!IsStr(fromStr))
		{
			fp.WriteLine(desc + " => Invalid/Non-existent search pattern");
			failCount++;
			return;
		}
		if (!IsStr(toStr))
		{
			fp.WriteLine(desc + " => Invalid/Non-existent replacement pattern");
			failCount++;
			return;
		}
		
		/// 3.6 - Check if the search pattern is hex or text string 
		let hexMode = true;
		let parts = fromStr.match(/^\s*'(.*)'\s*$/);
		if (parts !== null)
		{
			fromStr = parts[1];
			if (fromStr.includes('\x00')) //if null is present then search pattern need to be hex
				fromStr = fromStr.toHex();
			else
				hexMode = false;
		}
		
		/// 3.7 - Find the pattern
		let addr;
		if (hexMode)
		{
			addr = Exe.FindHex(" 00" + fromStr + " 00", dbegin, dend);
			if (addr < 0 && d2begin > 0)
				addr = Exe.FindHex(" 00" + fromStr + " 00", d2begin, d2end);
		}
		else
		{
			addr = Exe.FindAscii(fromStr, PHYSICAL);
		}
		
		/// 3.8 - If not found write to FailedTranslations.txt
		if (addr < 0)
		{
			fp.WriteLine(desc + " => Pattern not found");
			failCount++;
			return;
		}
		
		/// 3.9 - Increment addr for hexMode (since we searched with 0 prefixed)
		if (hexMode)
			addr++;
		
		/// 3.10 - Repeat 3.6 for replacement string
		hexMode = true;
		parts = toStr.match(/^\s*'(.*)'\s*$/);
		if (parts !== null)
		{
			toStr = parts[1];
			if (toStr.includes('\x00'))
				toStr = toStr.toHex();
			else
				hexMode = false;
		}
		
		/// 3.11 - Replace based on hexMode
		if (hexMode)
			Exe.SetHex(addr, toStr);
		else
			Exe.SetAscii(addr, toStr);
	});
	
	/// 4 - If the fail count is same as the length of the Translations array then report it
	if (failCount == Translations.length)
		throw Error("All translations had issues");
	else
		return true;
};