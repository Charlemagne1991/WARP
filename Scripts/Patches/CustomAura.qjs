/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Authors      : Shinryo, Neo-Mind                                       *
*   Created Date : 2020-11-10                                              *
*   Last Modified: 2020-11-10                                              *
*                                                                          *
\**************************************************************************/

// TODO - Pre-2010 clients need fixing
// TODO - AuraSprites is having issue finding the 2nd set of PUSHes in 2019 onwards

///
/// \brief Change the filename references used for Level99 Aura effect
///        ring_blue.tga -> aurafloat.tga
///        pikapika2.bmp -> auraring.bmp
///
CustomAuraSprites = function()
{
    /// 1.1 - Find the string 'effect\ring_blue.tga'
    let addr = Exe.FindAscii("effect\\ring_blue.tga", VIRTUAL, false);//false for not prefixing zero.
    if (addr < 0)
        throw Error("'effect\\ring_blue.tga' not found");

    let rblue = addr.toHex();

    /// 1.2 - Find the string 'effect\pikapika2.bmp'
    addr = Exe.FindAscii("effect\\pikapika2.bmp", VIRTUAL, false);//false for not prefixing zero.
    if (addr < 0)
        throw Error("'effect\\pikapika2.bmp' not found");

    let ppika2 = addr.toHex();

    /// 2.1 - Prepare replacement strings
    let strAF = "effect\\aurafloat.tga\x00";
    let strAR = "effect\\auraring.bmp\x00";
    let size = strAF.length + strAR.length;

    /// 2.2 - Allocate space to add the strings
    let free = Exe.FindSpace(size);
    if (free < 0)
        throw NOSPACE;

    /// 2.3 - Add the strings there (since there are null characters in between we will convert to hex and add)
    Exe.AddHex(free, (strAF + strAR).toHex(), size);

    /// 2.4 - Get the new string addrs
    let offsetAF = Exe.Phy2Vir(free, DIFF);
    let offsetAR = offsetAF + strAF.length;

    /// 3.1 - Find the first pattern (original strings are PUSHed to display the aura)
    let template =
        PUSH(MakeFiller(1))  //PUSH OFFSET addr
    +   MOV(ECX, R32)        //MOV ECX, reg32_A
    +   CALL(ALLWC)          //CALL addr2
    +   JMP(ALLWC)           //JMP addr3
    ;

    let code1 = SwapFiller(template, 1, rblue);  //addr => ASCII "effect\ring_blue.tga"
    let code2 = SwapFiller(template, 1, ppika2); //addr => ASCII "effect\pikapika2.bmp"
    let offRB = 1;
    let offPP = template.byteCount() + 2;

    addr = Exe.FindHex(code1 + PUSH_R + code2);//PUSH reg32_B in between
    if (addr < 0)
    {
        addr = Exe.FindHex(code1 + PUSH_0 + code2);//PUSH 0 in between
        offPP++;
    }
    if (addr < 0) //Some 2019 clients assign ECX (from memory) before the PUSHes but we can put it after the JMP in the template
	{
		template = template.remove(MOV(ECX, R32)) + MOV(ECX, [EBP, NEG2WC]);
		code1 = SwapFiller(template, 1, rblue);
		code2 = SwapFiller(template, 1, ppika2);
		offPP += 4;
		
		addr = Exe.FindHex(code1 + PUSH_0 + code2);//PUSH 0 in between
	}
    if (addr < 0)
        throw Error("First PUSHes not found");

    /// 3.2 - Update the string addrs
    Exe.SetInt32(addr + offRB, offsetAF);
    Exe.SetInt32(addr + offPP, offsetAR);

    ///===========================================///
    /// For new clients above is left unused but  ///
    /// we are still going to keep it as failsafe ///
    ///===========================================///

    if (Exe.BuildDate >= 20110700)
    {
        /// 4.1 - Find the second pattern
        let code =
            PUSH(ESI)        //PUSH ESI
        +   MOV(ESI, ECX)    //MOV ESI, ECX
        +   CALL(NEG2WC)     //CALL addr1
        +   MOV(ECX, ESI)    //MOV ECX, ESI
        +   POP(ESI)         //POP ESI
        +   JMP(NEG2WC)      //JMP addr2
        ;
        let csize = code.byteCount();
        let addrs = Exe.FindHexN(code);

        offRB = -1;
        offPP = -1;
    
        /// 4.2 - Filter out the pattern that CALLs pikapika2 effect followed by JMP to ring_blue.
		if (addrs.find( patAddr =>
        {
            addr = Exe.GetTgtAddr(patAddr + 4, PHYSICAL);
            offPP = Exe.FindHex( PUSH(ppika2), addr, addr + 0x100);
    
            addr = Exe.GetTgtAddr(patAddr + csize - 4, PHYSICAL);
            offRB = Exe.FindHex( PUSH(rblue) , addr, addr + 0x120);
    
            return (offPP > 0 && offRB > 0);
			
        }) === undefined
		)
            throw Error("Second PUSHes not found");
        
        /// 4.3 - Update the string addrs
        Exe.SetInt32(offRB + 1, offsetAF);
        Exe.SetInt32(offPP + 1, offsetAR);
    }
    return true;
};

///
/// \brief Modify the Aura setting code inside CPlayer::ReLaunchBlurEffects to CALL custom function 
///        The function sets up aura based on limits as per user specified input file.
///
CustomAuraLimits = function()
{
    /// 1.1 - Find the double PUSH before ReLaunchBlurEffects is CALLed
    let code =
        PUSH(0x14E)     //PUSH 14E
    +   PUSH(0x6D)      //PUSH 6D
    ;

    let addr = Exe.FindHex(code);
    if (addr < 0)
	{
		code = code.replace(PUSH(0x6D), PUSH_0 + PUSH(0x6D));
		addr = Exe.FindHex(code);
	}
    if (addr < 0)
        throw Error("Reference PUSHes not found");

    /// 1.2 - Set addr to the location after the PUSHes
    addr += code.byteCount();

    /// 1.3 - Find the CALL below it
    code =
        MOV(R32, [R32, POS1WC])  //MOV reg32_A, DWORD PTR DS:[reg32_B+const]
    +   MOV(ECX, [R32, WCp])     //MOV ECX, DWORD PTR DS:[reg32_A+const2]
    +   CALL(POS3WC)             //CALL CPlayer::ReLaunchBlurEffects
    ;

    addr = Exe.FindHex(code, addr, addr + 0x100);
    if (addr < 0)
        throw Error("ReLaunchBlurEffects CALL not found");

    /// 1.4 - Set addr to the PHYSICAL address of ReLaunchBlurEffects
    addr = Exe.GetTgtAddr(addr + code.byteCount() - 4, PHYSICAL);
	
    /// 2.1 - Find the first JE inside the function
    addr = Exe.FindHex( JE(POS2WC), addr, addr + 0x80);
    if (addr < 0)
        throw Error("First JE not found");

	/// 2.2 - Save JE's target address (PHYSICAL)
	let cmpBegin;
	let cmpEnd = Exe.GetTgtAddr(addr + 2, PHYSICAL);//JE opcode is 0F 84, so the addr is 2 bytes afterwards
	
	/// 2.3 - Look for comparison & aura creation code closer to the first JE for 2019+ clients
	let addr2 = -1;
	if (Exe.BuildDate > 20190000)
	{
		code =
			MOV(AX, [POS4WC])		//MOV AX, WORD PTR DS:[g_level]
		+	MOV(R32, R32)			//MOV reg32_A, reg32_B
		+	MOV([R32, POS2WC], AX)	//MOV WORD PTR DS:[reg32_B + const], AX
		+	CALL(NEG3WC)			//CALL func
		;
		addr2 = Exe.FindHex(code, addr + 6, addr + 0x50);
		
		if (addr2 > 0)
		{
			cmpBegin = addr2;
			cmpEnd = addr2 + code.byteCount();
		}
	}
	
	/// 2.4 - If not there look for PUSH 2E2 after first JE
	if (addr2 < 0)
	{
		addr2 = Exe.FindHex( PUSH(0x2E2), addr + 6, addr + 0x100);
		if (addr2 < 0)
			throw Error("2E2 assignment missing");
		
		/// 2.5 - Find the second JE after it
		addr = Exe.FindHex( JE(POS2WC), addr2 + 5, addr2 + 0x80);
		if (addr < 0)
			throw Error("Second JE not found");

		/// 2.6 - Save JE's target address (PHYSICAL)
		cmpBegin = Exe.GetTgtAddr(addr + 2, PHYSICAL);//JE opcode is 0F 84, so the addr is 2 bytes afterwards
	}
	
    ///---------------------------------------------------------------------
    /// Now we Check for the comparison style.
    ///   Old Clients directly compare there itself.
    ///   New Clients do it in a seperate function (by New i mean 2013+)
    ///---------------------------------------------------------------------

	let directCMP, Session, GetJobID, Level, AuraConsts, ZeroPushes, AssignZero;
    if (Exe.GetUint8(cmpBegin) === 0xB9) //MOV ECX, g_session ; Old Style - alternatively we can also check by client date
    {
        directCMP = true;

        /// 3.1 - Extract g_session and job Id getter addresses
        Session  = Exe.GetInt32(cmpBegin + 1);
        GetJobID = Exe.GetTgtAddr(cmpBegin + 6);

        /// 3.2 - Find the Level address comparison
        code = MOV(EAX, [POS3WC]); //MOV EAX, DWORD PTR DS:[g_level] ; EAX is later compared with 96
        addr = Exe.FindHex(code, cmpBegin, cmpBegin + 0x20);

        if (addr < 0)
        {
            code = CMP([POS3WC], POS1WC); //CMP DWORD PTR DS:[g_level], 96 or AF
            addr = Exe.FindHex(code, cmpBegin, cmpBegin + 0x80);
        }
        if (addr < 0)
            throw Error("Level Comparison not found");

        /// 3.3 - Set addr to location after the instruction
        addr += code.byteCount();

        /// 3.4 - Extract g_level address
        Level = Exe.GetInt32(addr - 4);

        /// 4.1 - Find the Aura Displayer Call (its a reg call so dunno the name of the function)
        code =
            PUSH(WC)            //PUSH auraconst
        +   PUSH_0              //PUSH 0
        +   MOV(ECX, ESI)       //MOV ECX, ESI
        +   " FF"               //CALL reg32 or CALL DWORD PTR DS:[reg32+8]
        ;
        let argPush = PUSH_0;
        let addr2 = Exe.FindHex(code, addr, addr + 0x20);

        if (addr2 < 0)
        {
            code = code.replace(PUSH_0, PUSH_R);//swap PUSH 0 with PUSH reg32_B
            argPush = '';
            addr2 = Exe.FindHex(code, addr, addr + 0x20);
        }
        if (addr2 < 0)
            throw Error("Aura Call not found");

        /// 4.2 - Extract the PUSH reg32_B
        if (argPush.isEmpty())
            argPush = Exe.GetHex(addr2 + 2, 1);

        /// 4.3 - Extract the aura constant
        AuraConsts = [Exe.GetHex(addr2 + 1, 1)];
        AuraConsts[1] = AuraConsts[2] = AuraConsts[0];//Same value is used for All Auras - and therefore shows only 1 type of aura per job

        /// 4.4 - Get the PUSH 0s before PUSH auraconst (it differs for some dates)
        let count = argPush.byteCount();
        argPush = Exe.GetHex(addr2 - 4 * count, 4 * count);

        if (argPush.substr(0, 3 * count) === argPush.substr(9 * count)) //First and Last is same means there are actually 4 PUSHes
            ZeroPushes = PUSH_0.repeat(4);
        else
            ZeroPushes = PUSH_0.repeat(3);

        /// 4.5 - Setup AssignZero variable
        AssignZero =
            JMP(8)              //JMP SHORT addr  ;addr is after MOV EAX, EAX below
        +   LEA(ESP, [ESP])     //LEA ESP, [ESP]  ;These are
        +   LEA(EBP, [EBP])     //LEA EBP, [EBP]  ;never
        +   MOV(EAX, EAX)       //MOV EAX, EAX    ;executed
        ;
    }
    else //MOV reg16, WORD PTR DS:[g_level] ; New Style - comparisons are done inside a seperate function
    {
        directCMP = false;

        /// 5.1 - Extract g_level address
        Level = Instr.FromAddr(cmpBegin).Disp;

        /// 5.2 - Find the comparison function call
        addr = Exe.FindHex( CALL(NEG3WC), cmpBegin, cmpBegin + 0x30);
        if (addr < 0)
            throw Error("Function CALL not found");

        /// 5.3 - Go inside the function
        addr = Exe.GetTgtAddr(addr + 1, PHYSICAL);

        /// 5.4 - Find g_session assignment
        code =
            CALL(ALLWC)         //CALL GetJobID
        +   PUSH_EAX            //PUSH EAX
        +   MOV(ECX, POS4WC)    //MOV ECX, g_session
        +   CALL()              //CALL addr
        ;
        addr = Exe.FindHex(code, addr, addr + 0x50);
        if (addr < 0)
            throw Error("g_session assignment not found");

        /// 5.5 - Extract Session & job Id getter address (we really dont need the Session for this one)
        GetJobID = Exe.GetTgtAddr(addr + 1);
		
		addr += code.byteCount();
        Session = Exe.GetInt32(addr - 5);

        /// 5.6 - Find the Zero assignment at the end of the function
        code = 
			MOV([ESI, POS2WC], 0); 	//MOV DWORD PTR DS:[ESI + const], 0
		+	POP(ESI)				//POP ESI
		+	RETN					//RETN
		;

        addr = Exe.FindHex(code, addr + 4, addr + 0x250);
        if (addr < 0)
            throw Error("Zero assignment not found");

        /// 5.7 - Save it (only needed for new types)
        AssignZero = Instr.fromAddr(addr).toString();

        /// 5.8 - Setup the Aura constants
        AuraConsts = [" 7D", " 93", " 92"];
		
		/// 5.9 - Find 7D push before the zero assignment
		code =
			PUSH_0		//PUSH 0
		+	PUSH_0		//PUSH 0
		+	PUSH(0x7D)	//PUSH 0
		+	PUSH_0		//PUSH 0
		;
		let addr2 = Exe.FindHex(code, addr - 0x60, addr);
		if (addr2 < 0)
			throw Error("Zero PUSHes missing");
		
		/// 5.10 - Extract all the PUSH 0s before 7D push
        ZeroPushes = PUSH_0;
		while (Exe.GetHex(addr2, 2) === PUSH_0)
		{
			ZeroPushes += PUSH_0;
			addr2 -= 2;
		}
    }

    /// 6.1 - Get the Input file
    let inFile = Exe.GetUserInput('$auraSpec', "Aura Limit Spec", "Enter the Aura Mapping file", "Inputs/AuraSpec.yml");
    if (inFile === false)
        throw "Cancelled - No mapping file specified";

    /// 6.2 - Load the input file which creates the hash table mapping the id ranges to level limits & aura id
	let AuraSpec = Warp.LoadYaml(inFile);
	if (AuraSpec === false || !Array.isArray(AuraSpec))
		throw "Cancelled - Invalid mapping";
	
	/// 6.3 - Calculate the total table size
    let tblSize = 0;
	AuraSpec.forEach( hash =>
	{
		tblSize += (4 * hash.IDs.length) + 2;
		tblSize += (5 * hash.Map.length) + 2;
	});

    /// 7.1 - Prepare code to insert (for reading the table and compare against Base level and Job ID)
    code =
        PUSH(ESI)                       //PUSH ESI
    +   MOV(ESI, ECX)                   //MOV ESI, ECX
    +   PUSH(EDX)                       //PUSH EDX
    +   PUSH(EBX)                       //PUSH EBX
    +   MOV(ECX, Session)               //MOV ECX, g_session
    +   CALL(MakeFiller(1))             //CALL GetJobID
    +   MOV(EBX, MakeFiller(2))         //MOV EBX, tblAddr
    +   MOV(ECX, [EBX])                 //MOV ECX, DWORD PTR DS:[EBX];	addr6
    +   TEST(ECX, ECX)                  //TEST ECX, ECX
    +   JE(0x49)                        //JE SHORT addr1
    +   MOVSX(EDX, [ECX])               //MOVSX EDX, WORD PTR DS:[ECX];	addr5
    +   TEST(EDX, EDX)                  //TEST EDX, EDX
    +   JS(0x15)                        //JS SHORT addr2
    +   CMP(EAX, EDX)                   //CMP EAX, EDX
    +   JL(0xC)                         //JL SHORT addr3
    +   MOVSX(EDX, [ECX, 2])            //MOVSX EDX, WORD PTR DS:[ECX+2]
    +   TEST(EDX, EDX)                  //TEST EDX, EDX
    +   JS(0x9)                         //JS SHORT addr2
    +   CMP(EAX, EDX)                   //CMP EAX, EDX
    +   JLE(0xA)                        //JLE SHORT addr4
    +   ADD(ECX, 4)                     //ADD ECX, 4;	addr3
    +   JMP(-0x28)                      //JMP SHORT addr5
    +   ADD(EBX, 8)                     //ADD EBX, 8;	addr2
    +   JMP(-0x39)                      //JMP SHORT addr6
    +   MOV(EAX, [Level])               //MOV EAX, DWORD PTR DS:[g_level];	addr4
    +   MOV(ECX, [EBX, 4])              //MOV ECX, DWORD PTR DS:[EBX+4]
    +   TEST(ECX, ECX)                  //TEST ECX, ECX
    +   JE(0x1C)                        //JE SHORT addr1
    +   MOVSX(EDX, [ECX])               //MOVSX EDX, WORD PTR DS:[ECX];	addr9
    +   TEST(EDX, EDX)                  //TEST EDX, EDX
    +   JS(0x15)                        //JS SHORT addr1
    +   CMP(EAX, EDX)                   //CMP EAX, EDX
    +   JL(0xC)                         //JL SHORT addr7
    +   MOVSX(EDX, [ECX, 2])            //MOVSX EDX, WORD PTR DS:[ECX+2]
    +   TEST(EDX, EDX)                  //TEST EDX,EDX
    +   JS(0x9)                         //JS SHORT addr1
    +   CMP(EAX, EDX)                   //CMP EAX, EDX
    +   JLE(0x14)                       //JLE SHORT addr8
    +   ADD(ECX, 5)                     //ADD ECX, 5;	addr7
    +   JMP(-0x28)                      //JMP SHORT addr9
    +   POP(EBX)                        //POP EBX; addr1
    +   POP(EDX)                        //POP EDX
    +   AssignZero                      //MOV DWORD PTR DS:[ESI+const], 0 (or Dummy)
    +   POP(ESI)                        //POP ESI
    +   RETN                            //RETN
    +   NOP                             //NOP
    +   POP(EBX)                        //POP EBX; addr8
    +   POP(EDX)                        //POP EDX
    +   ZeroPushes                      //PUSH 0 * n = 3, 4 or 9
    +   MOVZX(ECX, BYTE_PTR, [ECX, 4])  //MOVZX ECX, BYTE PTR DS:[ECX + 4]; addr8
    +   PUSH(ECX)                       //PUSH ECX
    +   PUSH_0                          //PUSH 0
    +   MOV(EAX, [ESI])                 //MOV EAX, DWORD PTR DS:[ESI]
    +   MOV(ECX, ESI)                   //MOV ECX, ESI
    +   CALL([EAX, 8])                  //CALL DWORD PTR DS:[EAX+8]
    +   POP(ESI)                        //POP ESI
    +   RETN                            //RETN
    ;
    if (!directCMP)
        code = code.replace( MOV(ECX, Session), NOP.repeat(5));

    /// 7.2 - Allocate space to add the code and the table data
    let size = code.byteCount() + 8 * AuraSpec.length + 4 + tblSize;
    let free = Exe.FindSpace(size);
    if (free < 0)
        throw NOSPACE;

    let freeVir = Exe.Phy2Vir(free, DIFF);

    /// 7.3 - Fill in the blanks
    code = SwapFiller(code, 1, GetJobID - (freeVir + 15));
    code = SwapFiller(code, 2, freeVir + code.byteCount());

    /// 7.4 - Construct the map data and table to insert
    let mapData = "";
    let tblData = "";
	
	addr = size - tblSize;
	AuraSpec.forEach( hash =>
	{
		/// 7.4.1 - Add the addr to the map
		mapData += (freeVir + addr).toHex(4);
		
		/// 7.4.2 - Add the base IDs to the table
		hash.IDs.forEach( bases =>
		{
			if (Array.isArray(bases))
				tblData += bases[0].toHex(2) + bases[1].toHex(2);
			else
				tblData += bases.toHex(2).repeat(2);
			
			addr += 4;
		});
		
		/// 7.4.3 - Add the -1 to end the table
		tblData += " FF FF";
		addr += 2;
		
		/// 7.4.4 - Add the addr to the map
		mapData += (freeVir + addr).toHex(4);
		
		/// 7.4.5 - Add the level range and aura constant sets
		hash.Map.forEach( map =>
		{
			tblData += map.JobRange[0].toHex(2) + map.JobRange[1].toHex(2);
			tblData += AuraConsts[map.Index];
			
			addr += 5;
		});
		
		/// 7.4.6 - Add the -1 to end the table
		tblData += " FF FF";
		addr += 2;
	});

    /// 7.5 - Add the function code and table data at free space
    Exe.AddHex(free, code + mapData + ALL00 + tblData, size);

    if (directCMP)
    {
        /// 8.1 - Since there was no existing Function CALL, We add a CALL to our function after ECX assignment
        code =
            MOV(ECX, ESI)                                   //MOV ECX, ESI
        +   CALL(freeVir, Exe.Phy2Vir(cmpBegin + 7, CODE))  //CALL func
        +   JMP(cmpEnd, (cmpBegin + 9))                     //JMP SHORT cmpEnd
        ;

        Exe.SetHex(cmpBegin, code);
    }
    else
    {
        /// 8.2 - Find the function call... again and replace it with a CALL to our Function
        addr = Exe.FindHex( CALL(NEG3WC), cmpBegin, cmpBegin + 0x30);
        Exe.SetTgtAddr(addr + 1, freeVir);

        /// 8.3 - Set addr to location after the CALL
        addr += 5;

        /// 8.4 - Fill with NOPs till cmpEnd
        if (addr < cmpEnd)
            Exe.SetNOPs(addr, cmpEnd - addr);
    }
	
    return true;
};
