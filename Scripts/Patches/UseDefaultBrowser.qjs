/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Jchcc                                                  *
*   Created Date  : 2020-11-21                                             *
*   Last Modified : 2020-11-24                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Enforce usage of default browser using ShellExecuteA function 
///       (after URL is parsed) instead of ROWebBrowser 
///
UseDefaultBrowser = function()
{
	/// 1.1 - Find the location where client is parsing the <URL>
	let code = 
	    PUSH_EAX 		//PUSH EAX
	+	CALL(ESI)		//CALL ESI (atoi)
	+ 	ADD(ESP, 4)		//ADD ESP,04
	+	MOV(EBX, EAX)	//MOV EBX, EAX
	;	
	let parseAddr = Exe.FindHex(code);
	if (parseAddr < 0)
		throw Error("Parsing not found");
	
	/// 1.2 - Find location where client start parsing first argument of <URL>
	code = 
	    PUSH_0					//PUSH 0
	+ 	LEA(EAX, [EBP, WCp])	//LEA EAX, [EBP-z]
	+ 	PUSH_EAX 				//PUSH EAX
	+ 	MOV(ECX, EDI)			//MOV ECX,EDI
	+ 	CALL(ALLWC)				//CALL func
	+	MOV([R32, WC], ALLWC)	//MOV DWORD PTR SS:[EBP-z], y ; could be different register too
	;
	let addr = Exe.FindHex(code, parseAddr - 0x80, parseAddr);
	if (offset < 0)
		throw Error("Function not found");
	
	/// 1.3 - Save location of the MOV DWORD 
	let jmpAddr = addr + code.byteCount() - 7;
	
	/// 1.4 - Save original instruction for later use
	let saveIns = Instr.FromAddr(jmpAddr);
	
	/// 2.1 - Get SHELL32.ShellExecuteA address
	let ShExec = Exe.FindFunc("ShellExecuteA", "SHELL32.dll");
	if (ShExec < 0)
		throw Error("ShellExecuteA not found");
	
	/// 2.2 - Find string 'open' to use for lpOperation
	let OpenStr = Exe.FindText("open");
	if (OpenStr < 0)
		throw Error("'open' not found");
	
	/// 2.3 - Prep the code for CALL ShellExecuteA
	code =
		PUSH_EAX 			//PUSH EAX
	+	MOV(EAX, [EAX])		//MOV EAX, DWORD PTR DS:[EAX]
	+ 	PUSH(0xA)			//PUSH 0A		; nShowCmd
	+	PUSH_0				//PUSH 0		; lpDirectory
	+	PUSH_0				//PUSH 0		; lpParameters
	+	PUSH_EAX 			//PUSH EAX 		; lpFile -> URL
	+	PUSH(OpenStr)		//PUSH offset	; lpOperation -> 'open'
	+	PUSH_0				//PUSH 0		; hwnd
	+ 	CALL([ShExec])		//CALL ShellExecuteA
	+ 	POP(EAX)			//POP EAX
	+ 	saveIns				//MOV DWORD PTR SS:[EBP-z], y 
	+ 	RETN()				//RETN
	;
	
	/// 2.4 - Allocate space to add our code
	let free = Exe.FindSpace(code.byteCount(), 0x10);
	if (free < 0)
		throw NOSPACE;

	/// 2.5 - Prep CALL instruction and insert everything
	Exe.AddHex(free, code);
	
	/// 2.6 - Create a CALL to the function from the MOV DWORD location
	Exe.SetCALL(jmpAddr, free, PHYSICAL, saveIns.Size - 5); //Extra NOPs at the end
	
	/// 3.1 - Find offset where ROWebBrowser is CALLed
	code =
	    PUSH(EBX)				//PUSH EBX
	+	PUSH([EBP, NEG2WC])		//PUSH DWORD PTR SS:[EBP-x]
	;
	  
	let rAddr = Exe.FindHex(code, parseAddr, parseAddr + 0x50);
	if (rAddr < 0)
		throw Error("ROWebBrowser pattern missing");
	
	/// 3.2 - Find the destination when create ROWebBrowser failed after rAddr
	code = 
	    MOV(ESI, EAX)	//MOV ESI, EAX
	+ 	TEST(ESI, ESI)	//TEST ESI,ESI
	+	JE(WCp)			//JE SHORT addr
	;
	  
	addr = Exe.FindHex(code, rAddr, rAddr + 0x20);
	if (addr < 0)
		throw Error("ROWebBrowser test missing");
	
	/// 3.3 - Get the JE target location
	let tgtAddr = Exe.GetTgtAddr(addr + code.byteCount() - 1, VIRTUAL, 1);
	
	/// 3.4 - Create a JMP from rAddr to the target
	Exe.SetJMP(rAddr, tgtAddr);

	return true;
};